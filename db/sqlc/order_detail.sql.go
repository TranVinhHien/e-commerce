// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order_detail.sql

package db

import (
	"context"
	"database/sql"
)

const createOrderDetail = `-- name: CreateOrderDetail :exec
INSERT INTO order_detail (
  order_detail_id, quantity, unit_price, product_sku_id, order_id
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateOrderDetailParams struct {
	OrderDetailID string  `json:"order_detail_id"`
	Quantity      int32   `json:"quantity"`
	UnitPrice     float64 `json:"unit_price"`
	ProductSkuID  string  `json:"product_sku_id"`
	OrderID       string  `json:"order_id"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) error {
	_, err := q.db.ExecContext(ctx, createOrderDetail,
		arg.OrderDetailID,
		arg.Quantity,
		arg.UnitPrice,
		arg.ProductSkuID,
		arg.OrderID,
	)
	return err
}

const deleteOrderDetail = `-- name: DeleteOrderDetail :exec
DELETE FROM order_detail
WHERE order_detail_id = ?
`

func (q *Queries) DeleteOrderDetail(ctx context.Context, orderDetailID string) error {
	_, err := q.db.ExecContext(ctx, deleteOrderDetail, orderDetailID)
	return err
}

const getOrderDetail = `-- name: GetOrderDetail :one
SELECT order_detail_id, quantity, unit_price, product_sku_id, order_id FROM order_detail
WHERE order_detail_id = ? LIMIT 1
`

func (q *Queries) GetOrderDetail(ctx context.Context, orderDetailID string) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, getOrderDetail, orderDetailID)
	var i OrderDetail
	err := row.Scan(
		&i.OrderDetailID,
		&i.Quantity,
		&i.UnitPrice,
		&i.ProductSkuID,
		&i.OrderID,
	)
	return i, err
}

const listOrderDetails = `-- name: ListOrderDetails :many
SELECT order_detail_id, quantity, unit_price, product_sku_id, order_id FROM order_detail
WHERE order_id = ?
`

func (q *Queries) ListOrderDetails(ctx context.Context, orderID string) ([]OrderDetail, error) {
	rows, err := q.db.QueryContext(ctx, listOrderDetails, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderDetail
	for rows.Next() {
		var i OrderDetail
		if err := rows.Scan(
			&i.OrderDetailID,
			&i.Quantity,
			&i.UnitPrice,
			&i.ProductSkuID,
			&i.OrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderDetailsByOrderID = `-- name: ListOrderDetailsByOrderID :many
SELECT order_detail_id, quantity, unit_price, product_sku_id, order_id FROM order_detail
WHERE order_id in  (?)
`

func (q *Queries) ListOrderDetailsByOrderID(ctx context.Context, orderID string) ([]OrderDetail, error) {
	rows, err := q.db.QueryContext(ctx, listOrderDetailsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderDetail
	for rows.Next() {
		var i OrderDetail
		if err := rows.Scan(
			&i.OrderDetailID,
			&i.Quantity,
			&i.UnitPrice,
			&i.ProductSkuID,
			&i.OrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderDetail = `-- name: UpdateOrderDetail :exec
UPDATE order_detail
SET quantity = COALESCE(?, quantity),
    unit_price = COALESCE(?, unit_price),
    product_sku_id = COALESCE(?, product_sku_id),
    order_id = COALESCE(?, order_id)
WHERE order_detail_id = ?
`

type UpdateOrderDetailParams struct {
	Quantity      sql.NullInt32   `json:"quantity"`
	UnitPrice     sql.NullFloat64 `json:"unit_price"`
	ProductSkuID  sql.NullString  `json:"product_sku_id"`
	OrderID       sql.NullString  `json:"order_id"`
	OrderDetailID string          `json:"order_detail_id"`
}

func (q *Queries) UpdateOrderDetail(ctx context.Context, arg UpdateOrderDetailParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderDetail,
		arg.Quantity,
		arg.UnitPrice,
		arg.ProductSkuID,
		arg.OrderID,
		arg.OrderDetailID,
	)
	return err
}
