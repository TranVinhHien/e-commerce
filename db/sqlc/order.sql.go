// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (
  order_id, total_amount, customer_address_id, discount_id, payment_method_id, customer_id
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreateOrderParams struct {
	OrderID           string         `json:"order_id"`
	TotalAmount       float64        `json:"total_amount"`
	CustomerAddressID string         `json:"customer_address_id"`
	DiscountID        sql.NullString `json:"discount_id"`
	PaymentMethodID   string         `json:"payment_method_id"`
	CustomerID        string         `json:"customer_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.OrderID,
		arg.TotalAmount,
		arg.CustomerAddressID,
		arg.DiscountID,
		arg.PaymentMethodID,
		arg.CustomerID,
	)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
UPDATE orders
SET order_status = 'Đã Hủy',
    update_date = NOW()
WHERE order_id = ?
`

func (q *Queries) DeleteOrder(ctx context.Context, orderID string) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, orderID)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT order_id, order_date, total_amount, customer_address_id, discount_id, payment_method_id, payment_status, order_status, create_date, update_date, customer_id FROM orders
WHERE order_id = ? LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, orderID string) (Orders, error) {
	row := q.db.QueryRowContext(ctx, getOrder, orderID)
	var i Orders
	err := row.Scan(
		&i.OrderID,
		&i.OrderDate,
		&i.TotalAmount,
		&i.CustomerAddressID,
		&i.DiscountID,
		&i.PaymentMethodID,
		&i.PaymentStatus,
		&i.OrderStatus,
		&i.CreateDate,
		&i.UpdateDate,
		&i.CustomerID,
	)
	return i, err
}

const listCustomerOrders = `-- name: ListCustomerOrders :many
SELECT order_id, order_date, total_amount, customer_address_id, discount_id, payment_method_id, payment_status, order_status, create_date, update_date, customer_id FROM orders
WHERE customer_id = ?
`

func (q *Queries) ListCustomerOrders(ctx context.Context, customerID string) ([]Orders, error) {
	rows, err := q.db.QueryContext(ctx, listCustomerOrders, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Orders
	for rows.Next() {
		var i Orders
		if err := rows.Scan(
			&i.OrderID,
			&i.OrderDate,
			&i.TotalAmount,
			&i.CustomerAddressID,
			&i.DiscountID,
			&i.PaymentMethodID,
			&i.PaymentStatus,
			&i.OrderStatus,
			&i.CreateDate,
			&i.UpdateDate,
			&i.CustomerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT order_id, order_date, total_amount, customer_address_id, discount_id, payment_method_id, payment_status, order_status, create_date, update_date, customer_id FROM orders
`

func (q *Queries) ListOrders(ctx context.Context) ([]Orders, error) {
	rows, err := q.db.QueryContext(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Orders
	for rows.Next() {
		var i Orders
		if err := rows.Scan(
			&i.OrderID,
			&i.OrderDate,
			&i.TotalAmount,
			&i.CustomerAddressID,
			&i.DiscountID,
			&i.PaymentMethodID,
			&i.PaymentStatus,
			&i.OrderStatus,
			&i.CreateDate,
			&i.UpdateDate,
			&i.CustomerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersPaged = `-- name: ListOrdersPaged :many
SELECT order_id, order_date, total_amount, customer_address_id, discount_id, payment_method_id, payment_status, order_status, create_date, update_date, customer_id FROM orders
ORDER BY create_date DESC
LIMIT ? OFFSET ?
`

type ListOrdersPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrdersPaged(ctx context.Context, arg ListOrdersPagedParams) ([]Orders, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Orders
	for rows.Next() {
		var i Orders
		if err := rows.Scan(
			&i.OrderID,
			&i.OrderDate,
			&i.TotalAmount,
			&i.CustomerAddressID,
			&i.DiscountID,
			&i.PaymentMethodID,
			&i.PaymentStatus,
			&i.OrderStatus,
			&i.CreateDate,
			&i.UpdateDate,
			&i.CustomerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET total_amount = COALESCE(?, total_amount),
    customer_address_id = COALESCE(?, customer_address_id),
    discount_id = COALESCE(?, discount_id),
    payment_method_id = COALESCE(?, payment_method_id),
    payment_status = COALESCE(?, payment_status),
    order_status = COALESCE(?, order_status),
    customer_id = COALESCE(?, customer_id),
    update_date = NOW()
WHERE order_id = ?
`

type UpdateOrderParams struct {
	TotalAmount       sql.NullFloat64         `json:"total_amount"`
	CustomerAddressID sql.NullString          `json:"customer_address_id"`
	DiscountID        sql.NullString          `json:"discount_id"`
	PaymentMethodID   sql.NullString          `json:"payment_method_id"`
	PaymentStatus     NullOrdersPaymentStatus `json:"payment_status"`
	OrderStatus       NullOrdersOrderStatus   `json:"order_status"`
	CustomerID        sql.NullString          `json:"customer_id"`
	OrderID           string                  `json:"order_id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder,
		arg.TotalAmount,
		arg.CustomerAddressID,
		arg.DiscountID,
		arg.PaymentMethodID,
		arg.PaymentStatus,
		arg.OrderStatus,
		arg.CustomerID,
		arg.OrderID,
	)
	return err
}
