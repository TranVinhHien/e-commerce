// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_sku.sql

package db

import (
	"context"
	"database/sql"
)

const createProductSKU = `-- name: CreateProductSKU :exec
INSERT INTO product_skus (
  product_sku_id, value, sku_stock, price, sort, products_spu_id
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreateProductSKUParams struct {
	ProductSkuID  string        `json:"product_sku_id"`
	Value         string        `json:"value"`
	SkuStock      sql.NullInt32 `json:"sku_stock"`
	Price         float64       `json:"price"`
	Sort          sql.NullInt32 `json:"sort"`
	ProductsSpuID string        `json:"products_spu_id"`
}

func (q *Queries) CreateProductSKU(ctx context.Context, arg CreateProductSKUParams) error {
	_, err := q.db.ExecContext(ctx, createProductSKU,
		arg.ProductSkuID,
		arg.Value,
		arg.SkuStock,
		arg.Price,
		arg.Sort,
		arg.ProductsSpuID,
	)
	return err
}

const deleteProductSKU = `-- name: DeleteProductSKU :exec
DELETE FROM product_skus
WHERE product_sku_id = ?
`

func (q *Queries) DeleteProductSKU(ctx context.Context, productSkuID string) error {
	_, err := q.db.ExecContext(ctx, deleteProductSKU, productSkuID)
	return err
}

const getProductSKU = `-- name: GetProductSKU :one
SELECT product_sku_id, value, sku_stock, price, sort, create_date, update_date, products_spu_id FROM product_skus
WHERE product_sku_id = ? LIMIT 1
`

func (q *Queries) GetProductSKU(ctx context.Context, productSkuID string) (ProductSkus, error) {
	row := q.db.QueryRowContext(ctx, getProductSKU, productSkuID)
	var i ProductSkus
	err := row.Scan(
		&i.ProductSkuID,
		&i.Value,
		&i.SkuStock,
		&i.Price,
		&i.Sort,
		&i.CreateDate,
		&i.UpdateDate,
		&i.ProductsSpuID,
	)
	return i, err
}

const getProductsBySKU = `-- name: GetProductsBySKU :many
SELECT product_sku_id, value, sku_stock, price, sort, create_date, update_date, products_spu_id 
FROM product_skus 
WHERE product_sku_id IN (?)
`

func (q *Queries) GetProductsBySKU(ctx context.Context, productSkuID string) ([]ProductSkus, error) {
	rows, err := q.db.QueryContext(ctx, getProductsBySKU, productSkuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductSkus
	for rows.Next() {
		var i ProductSkus
		if err := rows.Scan(
			&i.ProductSkuID,
			&i.Value,
			&i.SkuStock,
			&i.Price,
			&i.Sort,
			&i.CreateDate,
			&i.UpdateDate,
			&i.ProductsSpuID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductSKUs = `-- name: ListProductSKUs :many
SELECT product_sku_id, value, sku_stock, price, sort, create_date, update_date, products_spu_id FROM product_skus
WHERE products_spu_id = ?
`

func (q *Queries) ListProductSKUs(ctx context.Context, productsSpuID string) ([]ProductSkus, error) {
	rows, err := q.db.QueryContext(ctx, listProductSKUs, productsSpuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductSkus
	for rows.Next() {
		var i ProductSkus
		if err := rows.Scan(
			&i.ProductSkuID,
			&i.Value,
			&i.SkuStock,
			&i.Price,
			&i.Sort,
			&i.CreateDate,
			&i.UpdateDate,
			&i.ProductsSpuID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductSKUsPaged = `-- name: ListProductSKUsPaged :many
SELECT product_sku_id, value, sku_stock, price, sort, create_date, update_date, products_spu_id FROM product_skus
WHERE products_spu_id = ?
ORDER BY product_sku_id
LIMIT ? OFFSET ?
`

type ListProductSKUsPagedParams struct {
	ProductsSpuID string `json:"products_spu_id"`
	Limit         int32  `json:"limit"`
	Offset        int32  `json:"offset"`
}

func (q *Queries) ListProductSKUsPaged(ctx context.Context, arg ListProductSKUsPagedParams) ([]ProductSkus, error) {
	rows, err := q.db.QueryContext(ctx, listProductSKUsPaged, arg.ProductsSpuID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductSkus
	for rows.Next() {
		var i ProductSkus
		if err := rows.Scan(
			&i.ProductSkuID,
			&i.Value,
			&i.SkuStock,
			&i.Price,
			&i.Sort,
			&i.CreateDate,
			&i.UpdateDate,
			&i.ProductsSpuID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductSKU = `-- name: UpdateProductSKU :exec
UPDATE product_skus
SET value = COALESCE(?, value),
    sku_stock = COALESCE(?, sku_stock),
    price = COALESCE(?, price),
    sort = COALESCE(?, sort),
    products_spu_id = COALESCE(?, products_spu_id),
    update_date = NOW()
WHERE product_sku_id = ?
`

type UpdateProductSKUParams struct {
	Value         sql.NullString  `json:"value"`
	SkuStock      sql.NullInt32   `json:"sku_stock"`
	Price         sql.NullFloat64 `json:"price"`
	Sort          sql.NullInt32   `json:"sort"`
	ProductsSpuID sql.NullString  `json:"products_spu_id"`
	ProductSkuID  string          `json:"product_sku_id"`
}

func (q *Queries) UpdateProductSKU(ctx context.Context, arg UpdateProductSKUParams) error {
	_, err := q.db.ExecContext(ctx, updateProductSKU,
		arg.Value,
		arg.SkuStock,
		arg.Price,
		arg.Sort,
		arg.ProductsSpuID,
		arg.ProductSkuID,
	)
	return err
}
