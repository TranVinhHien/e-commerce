// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (
  account_id, username, password
) VALUES (
  ?, ?, ?
)
`

type CreateAccountParams struct {
	AccountID string `json:"account_id"`
	Username  string `json:"username"`
	Password  string `json:"password"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount, arg.AccountID, arg.Username, arg.Password)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE account_id = ?
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, accountID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, username, password, active_status, create_date, update_date FROM accounts
WHERE account_id = ? LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accountID string) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accountID)
	var i Accounts
	err := row.Scan(
		&i.AccountID,
		&i.Username,
		&i.Password,
		&i.ActiveStatus,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT account_id, username, password, active_status, create_date, update_date FROM accounts
WHERE username = ? LIMIT 1
`

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUsername, username)
	var i Accounts
	err := row.Scan(
		&i.AccountID,
		&i.Username,
		&i.Password,
		&i.ActiveStatus,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT account_id, username, password, active_status, create_date, update_date FROM accounts
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Accounts, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Accounts
	for rows.Next() {
		var i Accounts
		if err := rows.Scan(
			&i.AccountID,
			&i.Username,
			&i.Password,
			&i.ActiveStatus,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccountsPaged = `-- name: ListAccountsPaged :many
SELECT account_id, username, password, active_status, create_date, update_date FROM accounts
ORDER BY account_id
LIMIT ? OFFSET ?
`

type ListAccountsPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccountsPaged(ctx context.Context, arg ListAccountsPagedParams) ([]Accounts, error) {
	rows, err := q.db.QueryContext(ctx, listAccountsPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Accounts
	for rows.Next() {
		var i Accounts
		if err := rows.Scan(
			&i.AccountID,
			&i.Username,
			&i.Password,
			&i.ActiveStatus,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const login = `-- name: Login :one
SELECT accounts.account_id, accounts.username, accounts.password, accounts.active_status, accounts.create_date, accounts.update_date,role_account.role_id  FROM accounts join role_account 
ON accounts.account_id = role_account.account_id 
WHERE username = ? LIMIT 1
`

type LoginRow struct {
	AccountID    string                   `json:"account_id"`
	Username     string                   `json:"username"`
	Password     string                   `json:"password"`
	ActiveStatus NullAccountsActiveStatus `json:"active_status"`
	CreateDate   sql.NullTime             `json:"create_date"`
	UpdateDate   sql.NullTime             `json:"update_date"`
	RoleID       string                   `json:"role_id"`
}

func (q *Queries) Login(ctx context.Context, username string) (LoginRow, error) {
	row := q.db.QueryRowContext(ctx, login, username)
	var i LoginRow
	err := row.Scan(
		&i.AccountID,
		&i.Username,
		&i.Password,
		&i.ActiveStatus,
		&i.CreateDate,
		&i.UpdateDate,
		&i.RoleID,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts
SET password = COALESCE(?, password),
    active_status = COALESCE(?, active_status),
    update_date = NOW()
WHERE username = ?
`

type UpdateAccountParams struct {
	Password     sql.NullString           `json:"password"`
	ActiveStatus NullAccountsActiveStatus `json:"active_status"`
	Username     string                   `json:"username"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount, arg.Password, arg.ActiveStatus, arg.Username)
	return err
}
