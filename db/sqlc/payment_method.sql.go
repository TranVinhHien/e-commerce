// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payment_method.sql

package db

import (
	"context"
	"database/sql"
)

const createPaymentMethod = `-- name: CreatePaymentMethod :exec
INSERT INTO payment_methods (
  payment_method_id, name, description
) VALUES (
  ?, ?, ?
)
`

type CreatePaymentMethodParams struct {
	PaymentMethodID string         `json:"payment_method_id"`
	Name            string         `json:"name"`
	Description     sql.NullString `json:"description"`
}

func (q *Queries) CreatePaymentMethod(ctx context.Context, arg CreatePaymentMethodParams) error {
	_, err := q.db.ExecContext(ctx, createPaymentMethod, arg.PaymentMethodID, arg.Name, arg.Description)
	return err
}

const deletePaymentMethod = `-- name: DeletePaymentMethod :exec
DELETE FROM payment_methods
WHERE payment_method_id = ?
`

func (q *Queries) DeletePaymentMethod(ctx context.Context, paymentMethodID string) error {
	_, err := q.db.ExecContext(ctx, deletePaymentMethod, paymentMethodID)
	return err
}

const getPaymentMethod = `-- name: GetPaymentMethod :one
SELECT payment_method_id, name, description FROM payment_methods
WHERE payment_method_id = ? LIMIT 1
`

func (q *Queries) GetPaymentMethod(ctx context.Context, paymentMethodID string) (PaymentMethods, error) {
	row := q.db.QueryRowContext(ctx, getPaymentMethod, paymentMethodID)
	var i PaymentMethods
	err := row.Scan(&i.PaymentMethodID, &i.Name, &i.Description)
	return i, err
}

const listPaymentMethods = `-- name: ListPaymentMethods :many
SELECT payment_method_id, name, description FROM payment_methods
`

func (q *Queries) ListPaymentMethods(ctx context.Context) ([]PaymentMethods, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentMethods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentMethods
	for rows.Next() {
		var i PaymentMethods
		if err := rows.Scan(&i.PaymentMethodID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentMethodsPaged = `-- name: ListPaymentMethodsPaged :many
SELECT payment_method_id, name, description FROM payment_methods
ORDER BY payment_method_id
LIMIT ? OFFSET ?
`

type ListPaymentMethodsPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPaymentMethodsPaged(ctx context.Context, arg ListPaymentMethodsPagedParams) ([]PaymentMethods, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentMethodsPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentMethods
	for rows.Next() {
		var i PaymentMethods
		if err := rows.Scan(&i.PaymentMethodID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentMethod = `-- name: UpdatePaymentMethod :exec
UPDATE payment_methods
SET name = COALESCE(?, name),
    description = COALESCE(?, description)
WHERE payment_method_id = ?
`

type UpdatePaymentMethodParams struct {
	Name            sql.NullString `json:"name"`
	Description     sql.NullString `json:"description"`
	PaymentMethodID string         `json:"payment_method_id"`
}

func (q *Queries) UpdatePaymentMethod(ctx context.Context, arg UpdatePaymentMethodParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentMethod, arg.Name, arg.Description, arg.PaymentMethodID)
	return err
}
