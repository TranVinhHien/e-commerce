// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_spu.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createProductSPU = `-- name: CreateProductSPU :exec
INSERT INTO products_spu (
  products_spu_id, name, brand_id, description, short_description, image, media, ` + "`" + `key` + "`" + `, category_id
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateProductSPUParams struct {
	ProductsSpuID    string          `json:"products_spu_id"`
	Name             string          `json:"name"`
	BrandID          string          `json:"brand_id"`
	Description      string          `json:"description"`
	ShortDescription string          `json:"short_description"`
	Image            string          `json:"image"`
	Media            json.RawMessage `json:"media"`
	Key              string          `json:"key"`
	CategoryID       string          `json:"category_id"`
}

func (q *Queries) CreateProductSPU(ctx context.Context, arg CreateProductSPUParams) error {
	_, err := q.db.ExecContext(ctx, createProductSPU,
		arg.ProductsSpuID,
		arg.Name,
		arg.BrandID,
		arg.Description,
		arg.ShortDescription,
		arg.Image,
		arg.Media,
		arg.Key,
		arg.CategoryID,
	)
	return err
}

const deleteProductSPU = `-- name: DeleteProductSPU :exec
UPDATE products_spu
SET delete_status = 'Deleted',
    update_date = NOW()
WHERE products_spu_id = ?
`

func (q *Queries) DeleteProductSPU(ctx context.Context, productsSpuID string) error {
	_, err := q.db.ExecContext(ctx, deleteProductSPU, productsSpuID)
	return err
}

const getProductSPU = `-- name: GetProductSPU :one
SELECT products_spu_id, name, brand_id, description, short_description, stock_status, delete_status, sort, create_date, update_date, image, media, ` + "`" + `key` + "`" + `, category_id FROM products_spu
WHERE products_spu_id = ? LIMIT 1
`

func (q *Queries) GetProductSPU(ctx context.Context, productsSpuID string) (ProductsSpu, error) {
	row := q.db.QueryRowContext(ctx, getProductSPU, productsSpuID)
	var i ProductsSpu
	err := row.Scan(
		&i.ProductsSpuID,
		&i.Name,
		&i.BrandID,
		&i.Description,
		&i.ShortDescription,
		&i.StockStatus,
		&i.DeleteStatus,
		&i.Sort,
		&i.CreateDate,
		&i.UpdateDate,
		&i.Image,
		&i.Media,
		&i.Key,
		&i.CategoryID,
	)
	return i, err
}

const listProductSPUs = `-- name: ListProductSPUs :many
SELECT products_spu_id, name, brand_id, description, short_description, stock_status, delete_status, sort, create_date, update_date, image, media, ` + "`" + `key` + "`" + `, category_id FROM products_spu
WHERE delete_status = 'Active'
`

func (q *Queries) ListProductSPUs(ctx context.Context) ([]ProductsSpu, error) {
	rows, err := q.db.QueryContext(ctx, listProductSPUs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsSpu
	for rows.Next() {
		var i ProductsSpu
		if err := rows.Scan(
			&i.ProductsSpuID,
			&i.Name,
			&i.BrandID,
			&i.Description,
			&i.ShortDescription,
			&i.StockStatus,
			&i.DeleteStatus,
			&i.Sort,
			&i.CreateDate,
			&i.UpdateDate,
			&i.Image,
			&i.Media,
			&i.Key,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductSPUsByCategory = `-- name: ListProductSPUsByCategory :many
SELECT products_spu_id, name, brand_id, description, short_description, stock_status, delete_status, sort, create_date, update_date, image, media, ` + "`" + `key` + "`" + `, category_id FROM products_spu
WHERE category_id = ? AND delete_status = 'Active'
`

func (q *Queries) ListProductSPUsByCategory(ctx context.Context, categoryID string) ([]ProductsSpu, error) {
	rows, err := q.db.QueryContext(ctx, listProductSPUsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsSpu
	for rows.Next() {
		var i ProductsSpu
		if err := rows.Scan(
			&i.ProductsSpuID,
			&i.Name,
			&i.BrandID,
			&i.Description,
			&i.ShortDescription,
			&i.StockStatus,
			&i.DeleteStatus,
			&i.Sort,
			&i.CreateDate,
			&i.UpdateDate,
			&i.Image,
			&i.Media,
			&i.Key,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductSPUsPaged = `-- name: ListProductSPUsPaged :many
SELECT products_spu_id, name, brand_id, description, short_description, stock_status, delete_status, sort, create_date, update_date, image, media, ` + "`" + `key` + "`" + `, category_id FROM products_spu
WHERE delete_status = 'Active'
ORDER BY products_spu_id
LIMIT ? OFFSET ?
`

type ListProductSPUsPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductSPUsPaged(ctx context.Context, arg ListProductSPUsPagedParams) ([]ProductsSpu, error) {
	rows, err := q.db.QueryContext(ctx, listProductSPUsPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsSpu
	for rows.Next() {
		var i ProductsSpu
		if err := rows.Scan(
			&i.ProductsSpuID,
			&i.Name,
			&i.BrandID,
			&i.Description,
			&i.ShortDescription,
			&i.StockStatus,
			&i.DeleteStatus,
			&i.Sort,
			&i.CreateDate,
			&i.UpdateDate,
			&i.Image,
			&i.Media,
			&i.Key,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductSPU = `-- name: UpdateProductSPU :exec
UPDATE products_spu
SET name = COALESCE(?, name),
    brand_id = COALESCE(?, brand_id),
    description = COALESCE(?, description),
    short_description = COALESCE(?, short_description),
    stock_status = COALESCE(?, stock_status),
    sort = COALESCE(?, sort),
    image = COALESCE(?, image),
    media = COALESCE(?, media),
    ` + "`" + `key` + "`" + ` = COALESCE(?, ` + "`" + `key` + "`" + `),
    category_id = COALESCE(?, category_id),
    update_date = NOW()
WHERE products_spu_id = ?
`

type UpdateProductSPUParams struct {
	Name             sql.NullString             `json:"name"`
	BrandID          sql.NullString             `json:"brand_id"`
	Description      sql.NullString             `json:"description"`
	ShortDescription sql.NullString             `json:"short_description"`
	StockStatus      NullProductsSpuStockStatus `json:"stock_status"`
	Sort             sql.NullInt32              `json:"sort"`
	Image            sql.NullString             `json:"image"`
	Media            json.RawMessage            `json:"media"`
	Key              sql.NullString             `json:"key"`
	CategoryID       sql.NullString             `json:"category_id"`
	ProductsSpuID    string                     `json:"products_spu_id"`
}

func (q *Queries) UpdateProductSPU(ctx context.Context, arg UpdateProductSPUParams) error {
	_, err := q.db.ExecContext(ctx, updateProductSPU,
		arg.Name,
		arg.BrandID,
		arg.Description,
		arg.ShortDescription,
		arg.StockStatus,
		arg.Sort,
		arg.Image,
		arg.Media,
		arg.Key,
		arg.CategoryID,
		arg.ProductsSpuID,
	)
	return err
}
