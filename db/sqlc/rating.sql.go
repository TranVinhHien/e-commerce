// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rating.sql

package db

import (
	"context"
	"database/sql"
)

const createRating = `-- name: CreateRating :exec
INSERT INTO ratings (
  rating_id, comment, star, account_id, products_spu_id
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateRatingParams struct {
	RatingID      string         `json:"rating_id"`
	Comment       sql.NullString `json:"comment"`
	Star          int32          `json:"star"`
	AccountID     string         `json:"account_id"`
	ProductsSpuID string         `json:"products_spu_id"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) error {
	_, err := q.db.ExecContext(ctx, createRating,
		arg.RatingID,
		arg.Comment,
		arg.Star,
		arg.AccountID,
		arg.ProductsSpuID,
	)
	return err
}

const deleteRating = `-- name: DeleteRating :exec
DELETE FROM ratings
WHERE rating_id = ?
`

func (q *Queries) DeleteRating(ctx context.Context, ratingID string) error {
	_, err := q.db.ExecContext(ctx, deleteRating, ratingID)
	return err
}

const getRating = `-- name: GetRating :one
SELECT rating_id, comment, star, create_date, update_date, account_id, products_spu_id FROM ratings
WHERE rating_id = ? LIMIT 1
`

func (q *Queries) GetRating(ctx context.Context, ratingID string) (Ratings, error) {
	row := q.db.QueryRowContext(ctx, getRating, ratingID)
	var i Ratings
	err := row.Scan(
		&i.RatingID,
		&i.Comment,
		&i.Star,
		&i.CreateDate,
		&i.UpdateDate,
		&i.AccountID,
		&i.ProductsSpuID,
	)
	return i, err
}

const listRatings = `-- name: ListRatings :many
SELECT rating_id, comment, star, create_date, update_date, account_id, products_spu_id FROM ratings
WHERE products_spu_id = ?
`

func (q *Queries) ListRatings(ctx context.Context, productsSpuID string) ([]Ratings, error) {
	rows, err := q.db.QueryContext(ctx, listRatings, productsSpuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ratings
	for rows.Next() {
		var i Ratings
		if err := rows.Scan(
			&i.RatingID,
			&i.Comment,
			&i.Star,
			&i.CreateDate,
			&i.UpdateDate,
			&i.AccountID,
			&i.ProductsSpuID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRatingsPaged = `-- name: ListRatingsPaged :many
SELECT rating_id, comment, star, create_date, update_date, account_id, products_spu_id FROM ratings
WHERE products_spu_id = ?
ORDER BY create_date DESC
LIMIT ? OFFSET ?
`

type ListRatingsPagedParams struct {
	ProductsSpuID string `json:"products_spu_id"`
	Limit         int32  `json:"limit"`
	Offset        int32  `json:"offset"`
}

func (q *Queries) ListRatingsPaged(ctx context.Context, arg ListRatingsPagedParams) ([]Ratings, error) {
	rows, err := q.db.QueryContext(ctx, listRatingsPaged, arg.ProductsSpuID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ratings
	for rows.Next() {
		var i Ratings
		if err := rows.Scan(
			&i.RatingID,
			&i.Comment,
			&i.Star,
			&i.CreateDate,
			&i.UpdateDate,
			&i.AccountID,
			&i.ProductsSpuID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRating = `-- name: UpdateRating :exec
UPDATE ratings
SET comment = COALESCE(?, comment),
    star = COALESCE(?, star),
    update_date = NOW()
WHERE rating_id = ?
`

type UpdateRatingParams struct {
	Comment  sql.NullString `json:"comment"`
	Star     sql.NullInt32  `json:"star"`
	RatingID string         `json:"rating_id"`
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) error {
	_, err := q.db.ExecContext(ctx, updateRating, arg.Comment, arg.Star, arg.RatingID)
	return err
}
