// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: role_account.sql

package db

import (
	"context"
	"database/sql"
)

const createRoleAccount = `-- name: CreateRoleAccount :exec
INSERT INTO role_account (
  role_account_id, account_id, role_id
) VALUES (
  ?, ?, ?
)
`

type CreateRoleAccountParams struct {
	RoleAccountID string `json:"role_account_id"`
	AccountID     string `json:"account_id"`
	RoleID        string `json:"role_id"`
}

func (q *Queries) CreateRoleAccount(ctx context.Context, arg CreateRoleAccountParams) error {
	_, err := q.db.ExecContext(ctx, createRoleAccount, arg.RoleAccountID, arg.AccountID, arg.RoleID)
	return err
}

const deleteRoleAccount = `-- name: DeleteRoleAccount :exec
DELETE FROM role_account
WHERE role_account_id = ?
`

func (q *Queries) DeleteRoleAccount(ctx context.Context, roleAccountID string) error {
	_, err := q.db.ExecContext(ctx, deleteRoleAccount, roleAccountID)
	return err
}

const getAccountRoles = `-- name: GetAccountRoles :many
SELECT r.role_id, r.name, r.description FROM roles r
JOIN role_account ra ON r.role_id = ra.role_id
WHERE ra.account_id = ?
`

func (q *Queries) GetAccountRoles(ctx context.Context, accountID string) ([]Roles, error) {
	rows, err := q.db.QueryContext(ctx, getAccountRoles, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roles
	for rows.Next() {
		var i Roles
		if err := rows.Scan(&i.RoleID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleAccount = `-- name: GetRoleAccount :one
SELECT role_account_id, account_id, role_id FROM role_account
WHERE role_account_id = ? LIMIT 1
`

func (q *Queries) GetRoleAccount(ctx context.Context, roleAccountID string) (RoleAccount, error) {
	row := q.db.QueryRowContext(ctx, getRoleAccount, roleAccountID)
	var i RoleAccount
	err := row.Scan(&i.RoleAccountID, &i.AccountID, &i.RoleID)
	return i, err
}

const listRoleAccounts = `-- name: ListRoleAccounts :many
SELECT role_account_id, account_id, role_id FROM role_account
`

func (q *Queries) ListRoleAccounts(ctx context.Context) ([]RoleAccount, error) {
	rows, err := q.db.QueryContext(ctx, listRoleAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleAccount
	for rows.Next() {
		var i RoleAccount
		if err := rows.Scan(&i.RoleAccountID, &i.AccountID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoleAccountsPaged = `-- name: ListRoleAccountsPaged :many
SELECT role_account_id, account_id, role_id FROM role_account
ORDER BY role_account_id
LIMIT ? OFFSET ?
`

type ListRoleAccountsPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoleAccountsPaged(ctx context.Context, arg ListRoleAccountsPagedParams) ([]RoleAccount, error) {
	rows, err := q.db.QueryContext(ctx, listRoleAccountsPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleAccount
	for rows.Next() {
		var i RoleAccount
		if err := rows.Scan(&i.RoleAccountID, &i.AccountID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoleAccount = `-- name: UpdateRoleAccount :exec
UPDATE role_account
SET account_id = COALESCE(?, account_id),
    role_id = COALESCE(?, role_id)
WHERE role_account_id = ?
`

type UpdateRoleAccountParams struct {
	AccountID     sql.NullString `json:"account_id"`
	RoleID        sql.NullString `json:"role_id"`
	RoleAccountID string         `json:"role_account_id"`
}

func (q *Queries) UpdateRoleAccount(ctx context.Context, arg UpdateRoleAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateRoleAccount, arg.AccountID, arg.RoleID, arg.RoleAccountID)
	return err
}
