// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: emp.sql

package db

import (
	"context"
	"database/sql"
)

const createEmployee = `-- name: CreateEmployee :exec
INSERT INTO employees (
  employee_id, gender, dob, name, email, phone_number, address, salary, account_id
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateEmployeeParams struct {
	EmployeeID  string              `json:"employee_id"`
	Gender      NullEmployeesGender `json:"gender"`
	Dob         sql.NullTime        `json:"dob"`
	Name        string              `json:"name"`
	Email       string              `json:"email"`
	PhoneNumber string              `json:"phone_number"`
	Address     sql.NullString      `json:"address"`
	Salary      sql.NullFloat64     `json:"salary"`
	AccountID   string              `json:"account_id"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) error {
	_, err := q.db.ExecContext(ctx, createEmployee,
		arg.EmployeeID,
		arg.Gender,
		arg.Dob,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.Salary,
		arg.AccountID,
	)
	return err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees
WHERE employee_id = ?
`

func (q *Queries) DeleteEmployee(ctx context.Context, employeeID string) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, employeeID)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT employee_id, gender, dob, name, email, phone_number, address, salary, create_date, update_date, account_id FROM employees
WHERE employee_id = ? LIMIT 1
`

func (q *Queries) GetEmployee(ctx context.Context, employeeID string) (Employees, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, employeeID)
	var i Employees
	err := row.Scan(
		&i.EmployeeID,
		&i.Gender,
		&i.Dob,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Salary,
		&i.CreateDate,
		&i.UpdateDate,
		&i.AccountID,
	)
	return i, err
}

const getEmployeeByAccountID = `-- name: GetEmployeeByAccountID :one
SELECT employee_id, gender, dob, name, email, phone_number, address, salary, create_date, update_date, account_id FROM employees
WHERE account_id = ? LIMIT 1
`

func (q *Queries) GetEmployeeByAccountID(ctx context.Context, accountID string) (Employees, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeByAccountID, accountID)
	var i Employees
	err := row.Scan(
		&i.EmployeeID,
		&i.Gender,
		&i.Dob,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Salary,
		&i.CreateDate,
		&i.UpdateDate,
		&i.AccountID,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT employee_id, gender, dob, name, email, phone_number, address, salary, create_date, update_date, account_id FROM employees
`

func (q *Queries) ListEmployees(ctx context.Context) ([]Employees, error) {
	rows, err := q.db.QueryContext(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employees
	for rows.Next() {
		var i Employees
		if err := rows.Scan(
			&i.EmployeeID,
			&i.Gender,
			&i.Dob,
			&i.Name,
			&i.Email,
			&i.PhoneNumber,
			&i.Address,
			&i.Salary,
			&i.CreateDate,
			&i.UpdateDate,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeesPaged = `-- name: ListEmployeesPaged :many
SELECT employee_id, gender, dob, name, email, phone_number, address, salary, create_date, update_date, account_id FROM employees
ORDER BY employee_id
LIMIT ? OFFSET ?
`

type ListEmployeesPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmployeesPaged(ctx context.Context, arg ListEmployeesPagedParams) ([]Employees, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeesPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employees
	for rows.Next() {
		var i Employees
		if err := rows.Scan(
			&i.EmployeeID,
			&i.Gender,
			&i.Dob,
			&i.Name,
			&i.Email,
			&i.PhoneNumber,
			&i.Address,
			&i.Salary,
			&i.CreateDate,
			&i.UpdateDate,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE employees
SET gender = COALESCE(?, gender),
    dob = COALESCE(?, dob),
    name = COALESCE(?, name),
    email = COALESCE(?, email),
    phone_number = COALESCE(?, phone_number),
    address = COALESCE(?, address),
    salary = COALESCE(?, salary),
    account_id = COALESCE(?, account_id),
    update_date = NOW()
WHERE employee_id = ?
`

type UpdateEmployeeParams struct {
	Gender      NullEmployeesGender `json:"gender"`
	Dob         sql.NullTime        `json:"dob"`
	Name        sql.NullString      `json:"name"`
	Email       sql.NullString      `json:"email"`
	PhoneNumber sql.NullString      `json:"phone_number"`
	Address     sql.NullString      `json:"address"`
	Salary      sql.NullFloat64     `json:"salary"`
	AccountID   sql.NullString      `json:"account_id"`
	EmployeeID  string              `json:"employee_id"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.ExecContext(ctx, updateEmployee,
		arg.Gender,
		arg.Dob,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.Salary,
		arg.AccountID,
		arg.EmployeeID,
	)
	return err
}
