// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package db

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categorys (
  category_id, name, ` + "`" + `key` + "`" + `, ` + "`" + `path` + "`" + `, parent
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateCategoryParams struct {
	CategoryID string         `json:"category_id"`
	Name       string         `json:"name"`
	Key        string         `json:"key"`
	Path       string         `json:"path"`
	Parent     sql.NullString `json:"parent"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createCategory,
		arg.CategoryID,
		arg.Name,
		arg.Key,
		arg.Path,
		arg.Parent,
	)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categorys
WHERE category_id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, categoryID string) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, categoryID)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT category_id, name, ` + "`" + `key` + "`" + `, path, parent FROM categorys
WHERE category_id = ? LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, categoryID string) (Categorys, error) {
	row := q.db.QueryRowContext(ctx, getCategory, categoryID)
	var i Categorys
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Key,
		&i.Path,
		&i.Parent,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT category_id, name, ` + "`" + `key` + "`" + `, path, parent FROM categorys
`

func (q *Queries) ListCategories(ctx context.Context) ([]Categorys, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Categorys
	for rows.Next() {
		var i Categorys
		if err := rows.Scan(
			&i.CategoryID,
			&i.Name,
			&i.Key,
			&i.Path,
			&i.Parent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoriesByID = `-- name: ListCategoriesByID :many
SELECT c1.category_id, c1.name, c1.` + "`" + `key` + "`" + `, c1.path, c1.parent
FROM categorys AS c1 
WHERE c1.path LIKE CONCAt((SELECT path FROM categorys as c2 WHERE c2.category_id = ?),'%')
`

func (q *Queries) ListCategoriesByID(ctx context.Context, categoryID string) ([]Categorys, error) {
	rows, err := q.db.QueryContext(ctx, listCategoriesByID, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Categorys
	for rows.Next() {
		var i Categorys
		if err := rows.Scan(
			&i.CategoryID,
			&i.Name,
			&i.Key,
			&i.Path,
			&i.Parent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoriesPaged = `-- name: ListCategoriesPaged :many
SELECT category_id, name, ` + "`" + `key` + "`" + `, path, parent FROM categorys
ORDER BY category_id
LIMIT ? OFFSET ?
`

type ListCategoriesPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategoriesPaged(ctx context.Context, arg ListCategoriesPagedParams) ([]Categorys, error) {
	rows, err := q.db.QueryContext(ctx, listCategoriesPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Categorys
	for rows.Next() {
		var i Categorys
		if err := rows.Scan(
			&i.CategoryID,
			&i.Name,
			&i.Key,
			&i.Path,
			&i.Parent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categorys
SET name = COALESCE(?, name),
    ` + "`" + `key` + "`" + ` = COALESCE(?, ` + "`" + `key` + "`" + `),
    ` + "`" + `path` + "`" + ` = COALESCE(?, ` + "`" + `path` + "`" + `),
    parent = COALESCE(?, parent)
WHERE category_id = ?
`

type UpdateCategoryParams struct {
	Name       sql.NullString `json:"name"`
	Key        sql.NullString `json:"key"`
	Path       sql.NullString `json:"path"`
	Parent     sql.NullString `json:"parent"`
	CategoryID string         `json:"category_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory,
		arg.Name,
		arg.Key,
		arg.Path,
		arg.Parent,
		arg.CategoryID,
	)
	return err
}
