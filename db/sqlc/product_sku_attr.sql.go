// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_sku_attr.sql

package db

import (
	"context"
	"database/sql"
)

const createProductSKUAttr = `-- name: CreateProductSKUAttr :exec
INSERT INTO product_sku_attrs (
  product_sku_attr_id, name, value, image, products_spu_id
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateProductSKUAttrParams struct {
	ProductSkuAttrID string         `json:"product_sku_attr_id"`
	Name             string         `json:"name"`
	Value            string         `json:"value"`
	Image            sql.NullString `json:"image"`
	ProductsSpuID    string         `json:"products_spu_id"`
}

func (q *Queries) CreateProductSKUAttr(ctx context.Context, arg CreateProductSKUAttrParams) error {
	_, err := q.db.ExecContext(ctx, createProductSKUAttr,
		arg.ProductSkuAttrID,
		arg.Name,
		arg.Value,
		arg.Image,
		arg.ProductsSpuID,
	)
	return err
}

const deleteProductSKUAttr = `-- name: DeleteProductSKUAttr :exec
DELETE FROM product_sku_attrs
WHERE product_sku_attr_id = ?
`

func (q *Queries) DeleteProductSKUAttr(ctx context.Context, productSkuAttrID string) error {
	_, err := q.db.ExecContext(ctx, deleteProductSKUAttr, productSkuAttrID)
	return err
}

const getProductSKUAttr = `-- name: GetProductSKUAttr :one
SELECT product_sku_attr_id, name, value, image, products_spu_id FROM product_sku_attrs
WHERE product_sku_attr_id = ? LIMIT 1
`

func (q *Queries) GetProductSKUAttr(ctx context.Context, productSkuAttrID string) (ProductSkuAttrs, error) {
	row := q.db.QueryRowContext(ctx, getProductSKUAttr, productSkuAttrID)
	var i ProductSkuAttrs
	err := row.Scan(
		&i.ProductSkuAttrID,
		&i.Name,
		&i.Value,
		&i.Image,
		&i.ProductsSpuID,
	)
	return i, err
}

const listProductSKUAttrs = `-- name: ListProductSKUAttrs :many
SELECT product_sku_attr_id, name, value, image, products_spu_id FROM product_sku_attrs
WHERE products_spu_id = ?
`

func (q *Queries) ListProductSKUAttrs(ctx context.Context, productsSpuID string) ([]ProductSkuAttrs, error) {
	rows, err := q.db.QueryContext(ctx, listProductSKUAttrs, productsSpuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductSkuAttrs
	for rows.Next() {
		var i ProductSkuAttrs
		if err := rows.Scan(
			&i.ProductSkuAttrID,
			&i.Name,
			&i.Value,
			&i.Image,
			&i.ProductsSpuID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductSKUAttr = `-- name: UpdateProductSKUAttr :exec
UPDATE product_sku_attrs
SET name = COALESCE(?, name),
    value = COALESCE(?, value),
    image = COALESCE(?, image),
    products_spu_id = COALESCE(?, products_spu_id)
WHERE product_sku_attr_id = ?
`

type UpdateProductSKUAttrParams struct {
	Name             sql.NullString `json:"name"`
	Value            sql.NullString `json:"value"`
	Image            sql.NullString `json:"image"`
	ProductsSpuID    sql.NullString `json:"products_spu_id"`
	ProductSkuAttrID string         `json:"product_sku_attr_id"`
}

func (q *Queries) UpdateProductSKUAttr(ctx context.Context, arg UpdateProductSKUAttrParams) error {
	_, err := q.db.ExecContext(ctx, updateProductSKUAttr,
		arg.Name,
		arg.Value,
		arg.Image,
		arg.ProductsSpuID,
		arg.ProductSkuAttrID,
	)
	return err
}
