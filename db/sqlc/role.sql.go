// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role.sql

package db

import (
	"context"
	"database/sql"
)

const createRole = `-- name: CreateRole :exec
INSERT INTO roles (
  role_id, name, description
) VALUES (
  ?, ?, ?
)
`

type CreateRoleParams struct {
	RoleID      string         `json:"role_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.ExecContext(ctx, createRole, arg.RoleID, arg.Name, arg.Description)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE role_id = ?
`

func (q *Queries) DeleteRole(ctx context.Context, roleID string) error {
	_, err := q.db.ExecContext(ctx, deleteRole, roleID)
	return err
}

const getRole = `-- name: GetRole :one
SELECT role_id, name, description FROM roles
WHERE role_id = ? LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, roleID string) (Roles, error) {
	row := q.db.QueryRowContext(ctx, getRole, roleID)
	var i Roles
	err := row.Scan(&i.RoleID, &i.Name, &i.Description)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT role_id, name, description FROM roles
`

func (q *Queries) ListRoles(ctx context.Context) ([]Roles, error) {
	rows, err := q.db.QueryContext(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roles
	for rows.Next() {
		var i Roles
		if err := rows.Scan(&i.RoleID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolesPaged = `-- name: ListRolesPaged :many
SELECT role_id, name, description FROM roles
ORDER BY role_id
LIMIT ? OFFSET ?
`

type ListRolesPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRolesPaged(ctx context.Context, arg ListRolesPagedParams) ([]Roles, error) {
	rows, err := q.db.QueryContext(ctx, listRolesPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roles
	for rows.Next() {
		var i Roles
		if err := rows.Scan(&i.RoleID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles
SET name = COALESCE(?, name),
    description = COALESCE(?, description)
WHERE role_id = ?
`

type UpdateRoleParams struct {
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	RoleID      string         `json:"role_id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.Name, arg.Description, arg.RoleID)
	return err
}
