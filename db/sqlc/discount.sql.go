// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: discount.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countDisscounts = `-- name: CountDisscounts :one
SELECT COUNT(*) as totalElements FROM discounts
`

func (q *Queries) CountDisscounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countDisscounts)
	var totalelements int64
	err := row.Scan(&totalelements)
	return totalelements, err
}

const createDiscount = `-- name: CreateDiscount :exec
INSERT INTO discounts (
  discount_id, discount_code, discount_value, start_date, end_date, min_order_value, amount
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
`

type CreateDiscountParams struct {
	DiscountID    string          `json:"discount_id"`
	DiscountCode  string          `json:"discount_code"`
	DiscountValue float64         `json:"discount_value"`
	StartDate     time.Time       `json:"start_date"`
	EndDate       time.Time       `json:"end_date"`
	MinOrderValue sql.NullFloat64 `json:"min_order_value"`
	Amount        sql.NullInt32   `json:"amount"`
}

func (q *Queries) CreateDiscount(ctx context.Context, arg CreateDiscountParams) error {
	_, err := q.db.ExecContext(ctx, createDiscount,
		arg.DiscountID,
		arg.DiscountCode,
		arg.DiscountValue,
		arg.StartDate,
		arg.EndDate,
		arg.MinOrderValue,
		arg.Amount,
	)
	return err
}

const deleteDiscount = `-- name: DeleteDiscount :exec
DELETE FROM discounts
WHERE discount_id = ?
`

func (q *Queries) DeleteDiscount(ctx context.Context, discountID string) error {
	_, err := q.db.ExecContext(ctx, deleteDiscount, discountID)
	return err
}

const getDiscount = `-- name: GetDiscount :one
SELECT discount_id, discount_code, discount_value, start_date, end_date, min_order_value, amount, create_date, update_date FROM discounts
WHERE discount_id = ? LIMIT 1
`

func (q *Queries) GetDiscount(ctx context.Context, discountID string) (Discounts, error) {
	row := q.db.QueryRowContext(ctx, getDiscount, discountID)
	var i Discounts
	err := row.Scan(
		&i.DiscountID,
		&i.DiscountCode,
		&i.DiscountValue,
		&i.StartDate,
		&i.EndDate,
		&i.MinOrderValue,
		&i.Amount,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const getDiscountByCode = `-- name: GetDiscountByCode :one
SELECT discount_id, discount_code, discount_value, start_date, end_date, min_order_value, amount, create_date, update_date FROM discounts
WHERE discount_code = ? LIMIT 1
`

func (q *Queries) GetDiscountByCode(ctx context.Context, discountCode string) (Discounts, error) {
	row := q.db.QueryRowContext(ctx, getDiscountByCode, discountCode)
	var i Discounts
	err := row.Scan(
		&i.DiscountID,
		&i.DiscountCode,
		&i.DiscountValue,
		&i.StartDate,
		&i.EndDate,
		&i.MinOrderValue,
		&i.Amount,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const getDiscountForNoti = `-- name: GetDiscountForNoti :many
SELECT discount_id, discount_code, discount_value, start_date, end_date, min_order_value, amount, create_date, update_date FROM discounts
WHERE start_date BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL 1 HOUR)
`

func (q *Queries) GetDiscountForNoti(ctx context.Context) ([]Discounts, error) {
	rows, err := q.db.QueryContext(ctx, getDiscountForNoti)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Discounts
	for rows.Next() {
		var i Discounts
		if err := rows.Scan(
			&i.DiscountID,
			&i.DiscountCode,
			&i.DiscountValue,
			&i.StartDate,
			&i.EndDate,
			&i.MinOrderValue,
			&i.Amount,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveDiscounts = `-- name: ListActiveDiscounts :many
SELECT discount_id, discount_code, discount_value, start_date, end_date, min_order_value, amount, create_date, update_date FROM discounts
`

func (q *Queries) ListActiveDiscounts(ctx context.Context) ([]Discounts, error) {
	rows, err := q.db.QueryContext(ctx, listActiveDiscounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Discounts
	for rows.Next() {
		var i Discounts
		if err := rows.Scan(
			&i.DiscountID,
			&i.DiscountCode,
			&i.DiscountValue,
			&i.StartDate,
			&i.EndDate,
			&i.MinOrderValue,
			&i.Amount,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDiscountInusesPaged = `-- name: ListDiscountInusesPaged :many
SELECT discount_id, discount_code, discount_value, start_date, end_date, min_order_value, amount, create_date, update_date FROM discounts WHERE amount >0  
LIMIT ? OFFSET ?
`

type ListDiscountInusesPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDiscountInusesPaged(ctx context.Context, arg ListDiscountInusesPagedParams) ([]Discounts, error) {
	rows, err := q.db.QueryContext(ctx, listDiscountInusesPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Discounts
	for rows.Next() {
		var i Discounts
		if err := rows.Scan(
			&i.DiscountID,
			&i.DiscountCode,
			&i.DiscountValue,
			&i.StartDate,
			&i.EndDate,
			&i.MinOrderValue,
			&i.Amount,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDiscounts = `-- name: ListDiscounts :many
SELECT discount_id, discount_code, discount_value, start_date, end_date, min_order_value, amount, create_date, update_date FROM discounts
`

func (q *Queries) ListDiscounts(ctx context.Context) ([]Discounts, error) {
	rows, err := q.db.QueryContext(ctx, listDiscounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Discounts
	for rows.Next() {
		var i Discounts
		if err := rows.Scan(
			&i.DiscountID,
			&i.DiscountCode,
			&i.DiscountValue,
			&i.StartDate,
			&i.EndDate,
			&i.MinOrderValue,
			&i.Amount,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDiscountsPaged = `-- name: ListDiscountsPaged :many
SELECT discount_id, discount_code, discount_value, start_date, end_date, min_order_value, amount, create_date, update_date FROM discounts
LIMIT ? OFFSET ?
`

type ListDiscountsPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDiscountsPaged(ctx context.Context, arg ListDiscountsPagedParams) ([]Discounts, error) {
	rows, err := q.db.QueryContext(ctx, listDiscountsPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Discounts
	for rows.Next() {
		var i Discounts
		if err := rows.Scan(
			&i.DiscountID,
			&i.DiscountCode,
			&i.DiscountValue,
			&i.StartDate,
			&i.EndDate,
			&i.MinOrderValue,
			&i.Amount,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiscount = `-- name: UpdateDiscount :exec
UPDATE discounts
SET discount_code = COALESCE(?, discount_code),
    discount_value = COALESCE(?, discount_value),
    start_date = COALESCE(?, start_date),
    end_date = COALESCE(?, end_date),
    min_order_value = COALESCE(?, min_order_value),
    amount = COALESCE(?, amount),
    update_date = NOW()
WHERE discount_id = ?
`

type UpdateDiscountParams struct {
	DiscountCode  sql.NullString  `json:"discount_code"`
	DiscountValue sql.NullFloat64 `json:"discount_value"`
	StartDate     sql.NullTime    `json:"start_date"`
	EndDate       sql.NullTime    `json:"end_date"`
	MinOrderValue sql.NullFloat64 `json:"min_order_value"`
	Amount        sql.NullInt32   `json:"amount"`
	DiscountID    string          `json:"discount_id"`
}

func (q *Queries) UpdateDiscount(ctx context.Context, arg UpdateDiscountParams) error {
	_, err := q.db.ExecContext(ctx, updateDiscount,
		arg.DiscountCode,
		arg.DiscountValue,
		arg.StartDate,
		arg.EndDate,
		arg.MinOrderValue,
		arg.Amount,
		arg.DiscountID,
	)
	return err
}

const updateDiscountAmountCong = `-- name: UpdateDiscountAmountCong :exec
UPDATE discounts
SET amount = amount + 1,
    update_date = NOW()
WHERE discount_id = ?
`

func (q *Queries) UpdateDiscountAmountCong(ctx context.Context, discountID string) error {
	_, err := q.db.ExecContext(ctx, updateDiscountAmountCong, discountID)
	return err
}

const updateDiscountAmountTru = `-- name: UpdateDiscountAmountTru :exec
UPDATE discounts
SET amount = amount - 1,
    update_date = NOW()
WHERE discount_id = ?
`

func (q *Queries) UpdateDiscountAmountTru(ctx context.Context, discountID string) error {
	_, err := q.db.ExecContext(ctx, updateDiscountAmountTru, discountID)
	return err
}
