// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO customers (
  customer_id, name, email, image, dob, gender, account_id
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
`

type CreateCustomerParams struct {
	CustomerID string              `json:"customer_id"`
	Name       string              `json:"name"`
	Email      string              `json:"email"`
	Image      sql.NullString      `json:"image"`
	Dob        sql.NullTime        `json:"dob"`
	Gender     NullCustomersGender `json:"gender"`
	AccountID  string              `json:"account_id"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, createCustomer,
		arg.CustomerID,
		arg.Name,
		arg.Email,
		arg.Image,
		arg.Dob,
		arg.Gender,
		arg.AccountID,
	)
	return err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE customer_id = ?
`

func (q *Queries) DeleteCustomer(ctx context.Context, customerID string) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, customerID)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT customer_id, name, email, image, dob, gender, account_id, create_date, update_date FROM customers
WHERE customer_id = ? LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, customerID string) (Customers, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, customerID)
	var i Customers
	err := row.Scan(
		&i.CustomerID,
		&i.Name,
		&i.Email,
		&i.Image,
		&i.Dob,
		&i.Gender,
		&i.AccountID,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const getCustomerByAccountID = `-- name: GetCustomerByAccountID :one
SELECT customer_id, name, email, image, dob, gender, account_id, create_date, update_date FROM customers
WHERE account_id = ? LIMIT 1
`

func (q *Queries) GetCustomerByAccountID(ctx context.Context, accountID string) (Customers, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByAccountID, accountID)
	var i Customers
	err := row.Scan(
		&i.CustomerID,
		&i.Name,
		&i.Email,
		&i.Image,
		&i.Dob,
		&i.Gender,
		&i.AccountID,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT customer_id, name, email, image, dob, gender, account_id, create_date, update_date FROM customers
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customers, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customers
	for rows.Next() {
		var i Customers
		if err := rows.Scan(
			&i.CustomerID,
			&i.Name,
			&i.Email,
			&i.Image,
			&i.Dob,
			&i.Gender,
			&i.AccountID,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomersPaged = `-- name: ListCustomersPaged :many
SELECT customer_id, name, email, image, dob, gender, account_id, create_date, update_date FROM customers
ORDER BY customer_id
LIMIT ? OFFSET ?
`

type ListCustomersPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomersPaged(ctx context.Context, arg ListCustomersPagedParams) ([]Customers, error) {
	rows, err := q.db.QueryContext(ctx, listCustomersPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customers
	for rows.Next() {
		var i Customers
		if err := rows.Scan(
			&i.CustomerID,
			&i.Name,
			&i.Email,
			&i.Image,
			&i.Dob,
			&i.Gender,
			&i.AccountID,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers
SET name = COALESCE(?, name),
    email = COALESCE(?, email),
    image = COALESCE(?, image),
    dob = COALESCE(?, dob),
    gender = COALESCE(?, gender),
    account_id = COALESCE(?, account_id),
    update_date = NOW()
WHERE customer_id = ?
`

type UpdateCustomerParams struct {
	Name       sql.NullString      `json:"name"`
	Email      sql.NullString      `json:"email"`
	Image      sql.NullString      `json:"image"`
	Dob        sql.NullTime        `json:"dob"`
	Gender     NullCustomersGender `json:"gender"`
	AccountID  sql.NullString      `json:"account_id"`
	CustomerID string              `json:"customer_id"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer,
		arg.Name,
		arg.Email,
		arg.Image,
		arg.Dob,
		arg.Gender,
		arg.AccountID,
		arg.CustomerID,
	)
	return err
}
