// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: suppliers.sql

package db

import (
	"context"
	"database/sql"
)

const createSupplier = `-- name: CreateSupplier :exec
INSERT INTO suppliers (
  supplier_id, name, phone_number, email, address
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateSupplierParams struct {
	SupplierID  string         `json:"supplier_id"`
	Name        string         `json:"name"`
	PhoneNumber string         `json:"phone_number"`
	Email       string         `json:"email"`
	Address     sql.NullString `json:"address"`
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) error {
	_, err := q.db.ExecContext(ctx, createSupplier,
		arg.SupplierID,
		arg.Name,
		arg.PhoneNumber,
		arg.Email,
		arg.Address,
	)
	return err
}

const deleteSupplier = `-- name: DeleteSupplier :exec
DELETE FROM suppliers
WHERE supplier_id = ?
`

func (q *Queries) DeleteSupplier(ctx context.Context, supplierID string) error {
	_, err := q.db.ExecContext(ctx, deleteSupplier, supplierID)
	return err
}

const getSupplier = `-- name: GetSupplier :one
SELECT supplier_id, name, phone_number, email, address, create_date, update_date FROM suppliers
WHERE supplier_id = ? LIMIT 1
`

func (q *Queries) GetSupplier(ctx context.Context, supplierID string) (Suppliers, error) {
	row := q.db.QueryRowContext(ctx, getSupplier, supplierID)
	var i Suppliers
	err := row.Scan(
		&i.SupplierID,
		&i.Name,
		&i.PhoneNumber,
		&i.Email,
		&i.Address,
		&i.CreateDate,
		&i.UpdateDate,
	)
	return i, err
}

const listSuppliers = `-- name: ListSuppliers :many
SELECT supplier_id, name, phone_number, email, address, create_date, update_date FROM suppliers
`

func (q *Queries) ListSuppliers(ctx context.Context) ([]Suppliers, error) {
	rows, err := q.db.QueryContext(ctx, listSuppliers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Suppliers
	for rows.Next() {
		var i Suppliers
		if err := rows.Scan(
			&i.SupplierID,
			&i.Name,
			&i.PhoneNumber,
			&i.Email,
			&i.Address,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSuppliersPaged = `-- name: ListSuppliersPaged :many
SELECT supplier_id, name, phone_number, email, address, create_date, update_date FROM suppliers
ORDER BY supplier_id
LIMIT ? OFFSET ?
`

type ListSuppliersPagedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSuppliersPaged(ctx context.Context, arg ListSuppliersPagedParams) ([]Suppliers, error) {
	rows, err := q.db.QueryContext(ctx, listSuppliersPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Suppliers
	for rows.Next() {
		var i Suppliers
		if err := rows.Scan(
			&i.SupplierID,
			&i.Name,
			&i.PhoneNumber,
			&i.Email,
			&i.Address,
			&i.CreateDate,
			&i.UpdateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplier = `-- name: UpdateSupplier :exec
UPDATE suppliers
SET name = COALESCE(?, name),
    phone_number = COALESCE(?, phone_number),
    email = COALESCE(?, email),
    address = COALESCE(?, address),
    update_date = NOW()
WHERE supplier_id = ?
`

type UpdateSupplierParams struct {
	Name        sql.NullString `json:"name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Email       sql.NullString `json:"email"`
	Address     sql.NullString `json:"address"`
	SupplierID  string         `json:"supplier_id"`
}

func (q *Queries) UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) error {
	_, err := q.db.ExecContext(ctx, updateSupplier,
		arg.Name,
		arg.PhoneNumber,
		arg.Email,
		arg.Address,
		arg.SupplierID,
	)
	return err
}
