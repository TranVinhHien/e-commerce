// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type AccountsActiveStatus string

const (
	AccountsActiveStatusActive   AccountsActiveStatus = "Active"
	AccountsActiveStatusInactive AccountsActiveStatus = "Inactive"
)

func (e *AccountsActiveStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountsActiveStatus(s)
	case string:
		*e = AccountsActiveStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountsActiveStatus: %T", src)
	}
	return nil
}

type NullAccountsActiveStatus struct {
	AccountsActiveStatus AccountsActiveStatus `json:"accounts_active_status"`
	Valid                bool                 `json:"valid"` // Valid is true if AccountsActiveStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountsActiveStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AccountsActiveStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountsActiveStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountsActiveStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountsActiveStatus), nil
}

type CustomersGender string

const (
	CustomersGenderNam CustomersGender = "Nam"
	CustomersGenderN   CustomersGender = "Nữ"
)

func (e *CustomersGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CustomersGender(s)
	case string:
		*e = CustomersGender(s)
	default:
		return fmt.Errorf("unsupported scan type for CustomersGender: %T", src)
	}
	return nil
}

type NullCustomersGender struct {
	CustomersGender CustomersGender `json:"customers_gender"`
	Valid           bool            `json:"valid"` // Valid is true if CustomersGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCustomersGender) Scan(value interface{}) error {
	if value == nil {
		ns.CustomersGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CustomersGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCustomersGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CustomersGender), nil
}

type EmployeesGender string

const (
	EmployeesGenderNam EmployeesGender = "Nam"
	EmployeesGenderN   EmployeesGender = "Nữ"
)

func (e *EmployeesGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EmployeesGender(s)
	case string:
		*e = EmployeesGender(s)
	default:
		return fmt.Errorf("unsupported scan type for EmployeesGender: %T", src)
	}
	return nil
}

type NullEmployeesGender struct {
	EmployeesGender EmployeesGender `json:"employees_gender"`
	Valid           bool            `json:"valid"` // Valid is true if EmployeesGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEmployeesGender) Scan(value interface{}) error {
	if value == nil {
		ns.EmployeesGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EmployeesGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEmployeesGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EmployeesGender), nil
}

type OrdersOrderStatus string

const (
	OrdersOrderStatusHy      OrdersOrderStatus = "Đã Hủy"
	OrdersOrderStatusChXcNhn OrdersOrderStatus = "Chờ Xác Nhận"
	OrdersOrderStatusXcNhn   OrdersOrderStatus = "Đã Xác Nhận"
	OrdersOrderStatusGiaoHng OrdersOrderStatus = "Đã Giao Hàng"
)

func (e *OrdersOrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrdersOrderStatus(s)
	case string:
		*e = OrdersOrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrdersOrderStatus: %T", src)
	}
	return nil
}

type NullOrdersOrderStatus struct {
	OrdersOrderStatus OrdersOrderStatus `json:"orders_order_status"`
	Valid             bool              `json:"valid"` // Valid is true if OrdersOrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrdersOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrdersOrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrdersOrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrdersOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrdersOrderStatus), nil
}

type OrdersPaymentStatus string

const (
	OrdersPaymentStatusThanhTonHtHn   OrdersPaymentStatus = "Thanh Toán Hết Hạn"
	OrdersPaymentStatusChThanhTon     OrdersPaymentStatus = "Chờ Thanh Toán"
	OrdersPaymentStatusThanhTonTrcTip OrdersPaymentStatus = "Thanh Toán Trực Tiếp"
	OrdersPaymentStatusThanhTon       OrdersPaymentStatus = "Đã Thanh Toán"
)

func (e *OrdersPaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrdersPaymentStatus(s)
	case string:
		*e = OrdersPaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrdersPaymentStatus: %T", src)
	}
	return nil
}

type NullOrdersPaymentStatus struct {
	OrdersPaymentStatus OrdersPaymentStatus `json:"orders_payment_status"`
	Valid               bool                `json:"valid"` // Valid is true if OrdersPaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrdersPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrdersPaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrdersPaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrdersPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrdersPaymentStatus), nil
}

type ProductsSpuDeleteStatus string

const (
	ProductsSpuDeleteStatusActive  ProductsSpuDeleteStatus = "Active"
	ProductsSpuDeleteStatusDeleted ProductsSpuDeleteStatus = "Deleted"
)

func (e *ProductsSpuDeleteStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductsSpuDeleteStatus(s)
	case string:
		*e = ProductsSpuDeleteStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductsSpuDeleteStatus: %T", src)
	}
	return nil
}

type NullProductsSpuDeleteStatus struct {
	ProductsSpuDeleteStatus ProductsSpuDeleteStatus `json:"products_spu_delete_status"`
	Valid                   bool                    `json:"valid"` // Valid is true if ProductsSpuDeleteStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductsSpuDeleteStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProductsSpuDeleteStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductsSpuDeleteStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductsSpuDeleteStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductsSpuDeleteStatus), nil
}

type ProductsSpuStockStatus string

const (
	ProductsSpuStockStatusInStock    ProductsSpuStockStatus = "InStock"
	ProductsSpuStockStatusOutOfStock ProductsSpuStockStatus = "OutOfStock"
)

func (e *ProductsSpuStockStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductsSpuStockStatus(s)
	case string:
		*e = ProductsSpuStockStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductsSpuStockStatus: %T", src)
	}
	return nil
}

type NullProductsSpuStockStatus struct {
	ProductsSpuStockStatus ProductsSpuStockStatus `json:"products_spu_stock_status"`
	Valid                  bool                   `json:"valid"` // Valid is true if ProductsSpuStockStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductsSpuStockStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProductsSpuStockStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductsSpuStockStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductsSpuStockStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductsSpuStockStatus), nil
}

type PurchaseOrdersStatus string

const (
	PurchaseOrdersStatusAngCh PurchaseOrdersStatus = "Đang Chờ"
	PurchaseOrdersStatusXcNhn PurchaseOrdersStatus = "Đã Xác Nhận"
	PurchaseOrdersStatusTrHon PurchaseOrdersStatus = "Trì Hoãn"
	PurchaseOrdersStatusGiao  PurchaseOrdersStatus = "Đã Giao"
)

func (e *PurchaseOrdersStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PurchaseOrdersStatus(s)
	case string:
		*e = PurchaseOrdersStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PurchaseOrdersStatus: %T", src)
	}
	return nil
}

type NullPurchaseOrdersStatus struct {
	PurchaseOrdersStatus PurchaseOrdersStatus `json:"purchase_orders_status"`
	Valid                bool                 `json:"valid"` // Valid is true if PurchaseOrdersStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPurchaseOrdersStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PurchaseOrdersStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PurchaseOrdersStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPurchaseOrdersStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PurchaseOrdersStatus), nil
}

type Accounts struct {
	AccountID    string                   `json:"account_id"`
	Username     string                   `json:"username"`
	Password     string                   `json:"password"`
	ActiveStatus NullAccountsActiveStatus `json:"active_status"`
	CreateDate   sql.NullTime             `json:"create_date"`
	UpdateDate   sql.NullTime             `json:"update_date"`
}

type Categorys struct {
	CategoryID string         `json:"category_id"`
	Name       string         `json:"name"`
	Key        string         `json:"key"`
	Path       string         `json:"path"`
	Parent     sql.NullString `json:"parent"`
}

type CustomerAddress struct {
	IDAddress   string       `json:"id_address"`
	CustomerID  string       `json:"customer_id"`
	Address     string       `json:"address"`
	PhoneNumber string       `json:"phone_number"`
	CreateDate  sql.NullTime `json:"create_date"`
	UpdateDate  sql.NullTime `json:"update_date"`
}

type Customers struct {
	CustomerID              string              `json:"customer_id"`
	Name                    string              `json:"name"`
	Email                   string              `json:"email"`
	Image                   sql.NullString      `json:"image"`
	Dob                     sql.NullTime        `json:"dob"`
	Gender                  NullCustomersGender `json:"gender"`
	AccountID               string              `json:"account_id"`
	CreateDate              sql.NullTime        `json:"create_date"`
	UpdateDate              sql.NullTime        `json:"update_date"`
	DeviceRegistrationToken sql.NullString      `json:"device_registration_token"`
}

type DescriptionAttr struct {
	DescriptionAttrID string `json:"description_attr_id"`
	Name              string `json:"name"`
	Value             string `json:"value"`
	ProductsSpuID     string `json:"products_spu_id"`
}

type Discounts struct {
	DiscountID    string          `json:"discount_id"`
	DiscountCode  string          `json:"discount_code"`
	DiscountValue float64         `json:"discount_value"`
	StartDate     time.Time       `json:"start_date"`
	EndDate       time.Time       `json:"end_date"`
	MinOrderValue sql.NullFloat64 `json:"min_order_value"`
	Amount        sql.NullInt32   `json:"amount"`
	CreateDate    sql.NullTime    `json:"create_date"`
	UpdateDate    sql.NullTime    `json:"update_date"`
}

type Employees struct {
	EmployeeID  string              `json:"employee_id"`
	Gender      NullEmployeesGender `json:"gender"`
	Dob         sql.NullTime        `json:"dob"`
	Name        string              `json:"name"`
	Email       string              `json:"email"`
	PhoneNumber string              `json:"phone_number"`
	Address     sql.NullString      `json:"address"`
	Salary      sql.NullFloat64     `json:"salary"`
	CreateDate  sql.NullTime        `json:"create_date"`
	UpdateDate  sql.NullTime        `json:"update_date"`
	AccountID   string              `json:"account_id"`
}

type OrderDetail struct {
	OrderDetailID string  `json:"order_detail_id"`
	Quantity      int32   `json:"quantity"`
	UnitPrice     float64 `json:"unit_price"`
	ProductSkuID  string  `json:"product_sku_id"`
	OrderID       string  `json:"order_id"`
}

type Orders struct {
	OrderID           string                  `json:"order_id"`
	TotalAmount       float64                 `json:"total_amount"`
	CustomerAddressID string                  `json:"customer_address_id"`
	DiscountID        sql.NullString          `json:"discount_id"`
	PaymentMethodID   string                  `json:"payment_method_id"`
	PaymentStatus     NullOrdersPaymentStatus `json:"payment_status"`
	OrderStatus       NullOrdersOrderStatus   `json:"order_status"`
	CreateDate        sql.NullTime            `json:"create_date"`
	UpdateDate        sql.NullTime            `json:"update_date"`
	CustomerID        string                  `json:"customer_id"`
}

type PaymentMethods struct {
	PaymentMethodID string         `json:"payment_method_id"`
	Name            string         `json:"name"`
	Description     sql.NullString `json:"description"`
}

type ProductSkuAttrs struct {
	ProductSkuAttrID string         `json:"product_sku_attr_id"`
	Name             string         `json:"name"`
	Value            string         `json:"value"`
	Image            sql.NullString `json:"image"`
	ProductsSpuID    string         `json:"products_spu_id"`
}

type ProductSkus struct {
	ProductSkuID  string        `json:"product_sku_id"`
	Value         string        `json:"value"`
	SkuStock      sql.NullInt32 `json:"sku_stock"`
	Price         float64       `json:"price"`
	Sort          sql.NullInt32 `json:"sort"`
	CreateDate    sql.NullTime  `json:"create_date"`
	UpdateDate    sql.NullTime  `json:"update_date"`
	ProductsSpuID string        `json:"products_spu_id"`
}

type ProductsSpu struct {
	ProductsSpuID    string                      `json:"products_spu_id"`
	Name             string                      `json:"name"`
	BrandID          string                      `json:"brand_id"`
	Description      string                      `json:"description"`
	ShortDescription string                      `json:"short_description"`
	StockStatus      NullProductsSpuStockStatus  `json:"stock_status"`
	DeleteStatus     NullProductsSpuDeleteStatus `json:"delete_status"`
	Sort             sql.NullInt32               `json:"sort"`
	CreateDate       sql.NullTime                `json:"create_date"`
	UpdateDate       sql.NullTime                `json:"update_date"`
	Image            string                      `json:"image"`
	Media            sql.NullString              `json:"media"`
	Key              string                      `json:"key"`
	CategoryID       string                      `json:"category_id"`
}

type PurchaseOrderDetail struct {
	PurchaseOrderDetailID string          `json:"purchase_order_detail_id"`
	Quantity              sql.NullInt32   `json:"quantity"`
	UnitPrice             sql.NullFloat64 `json:"unit_price"`
	PurchaseOrderID       string          `json:"purchase_order_id"`
	ProductSkuID          string          `json:"product_sku_id"`
}

type PurchaseOrders struct {
	PurchaseOrderID string                   `json:"purchase_order_id"`
	TotalAmount     float64                  `json:"total_amount"`
	Status          NullPurchaseOrdersStatus `json:"status"`
	CreateDate      sql.NullTime             `json:"create_date"`
	UpdateDate      sql.NullTime             `json:"update_date"`
	SupplierID      string                   `json:"supplier_id"`
	EmployeeID      string                   `json:"employee_id"`
}

type Ratings struct {
	RatingID      string         `json:"rating_id"`
	Comment       sql.NullString `json:"comment"`
	Star          int32          `json:"star"`
	CreateDate    sql.NullTime   `json:"create_date"`
	UpdateDate    sql.NullTime   `json:"update_date"`
	CustomerID    string         `json:"customer_id"`
	ProductsSpuID string         `json:"products_spu_id"`
}

type RoleAccount struct {
	RoleAccountID string `json:"role_account_id"`
	AccountID     string `json:"account_id"`
	RoleID        string `json:"role_id"`
}

type Roles struct {
	RoleID      string         `json:"role_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

type Suppliers struct {
	SupplierID  string         `json:"supplier_id"`
	Name        string         `json:"name"`
	PhoneNumber string         `json:"phone_number"`
	Email       string         `json:"email"`
	Address     sql.NullString `json:"address"`
	CreateDate  sql.NullTime   `json:"create_date"`
	UpdateDate  sql.NullTime   `json:"update_date"`
}
